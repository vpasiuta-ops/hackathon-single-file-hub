import { useEffect, useState } from 'react';

interface ReCaptchaProps {
  onChange: (token: string | null) => void;
}

declare global {
  interface Window {
    grecaptcha?: {
      render: (element: string | Element, options: any) => number;
      reset: (widgetId?: number) => void;
      getResponse: (widgetId?: number) => string;
      ready: (callback: () => void) => void;
    };
  }
}

export const ReCaptcha = ({ onChange }: ReCaptchaProps) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const siteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY;
    
    console.log('üîÑ reCAPTCHA —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞–ª–∞—Å—è');
    console.log('üìç Site Key:', siteKey);
    console.log('üåê –î–æ–º–µ–Ω:', window.location.hostname);
    
    if (!siteKey) {
      console.error('‚ùå Site Key –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      setError('reCAPTCHA Site Key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      return;
    }

    const renderRecaptcha = () => {
      // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ DOM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ—Å–Ω—É—î
      const container = document.getElementById('recaptcha-container');
      if (!container) {
        console.log('‚è≥ DOM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π, —á–µ–∫–∞—î–º–æ...');
        setTimeout(renderRecaptcha, 100);
        return;
      }

      // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Google reCAPTCHA API –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
      if (!window.grecaptcha || !window.grecaptcha.render) {
        console.log('‚è≥ Google reCAPTCHA API —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π, —á–µ–∫–∞—î–º–æ...');
        setTimeout(renderRecaptcha, 200);
        return;
      }

      // 3. –†–µ–Ω–¥–µ—Ä–∏–º–æ reCAPTCHA
      try {
        console.log('‚úÖ –í—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ reCAPTCHA');
        console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ:', container);
        
        window.grecaptcha.render('recaptcha-container', {
          sitekey: siteKey,
          callback: (token: string) => {
            console.log('üéâ reCAPTCHA —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!');
            onChange(token);
            setError(null);
          },
          'expired-callback': () => {
            console.log('‚è∞ reCAPTCHA –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞');
            onChange(null);
          },
          'error-callback': (err: any) => {
            console.error('‚ùå reCAPTCHA –ø–æ–º–∏–ª–∫–∞:', err);
            setError(`reCAPTCHA –ø–æ–º–∏–ª–∫–∞: ${err}`);
            onChange(null);
          }
        });
        
        console.log('‚úÖ reCAPTCHA —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞');
        setIsLoaded(true);
        
      } catch (err) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä—ñ reCAPTCHA:', err);
        const message = err instanceof Error ? err.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
        setError(`–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${message}`);
      }
    };

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Google reCAPTCHA —Å–∫—Ä–∏–ø—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (!document.querySelector('script[src*="recaptcha"]')) {
      console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Google reCAPTCHA —Å–∫—Ä–∏–ø—Ç...');
      
      const script = document.createElement('script');
      script.src = 'https://www.google.com/recaptcha/api.js';
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç Google reCAPTCHA –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        // –î–∞—î–º–æ —á–∞—Å API —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        setTimeout(renderRecaptcha, 300);
      };

      script.onerror = (e) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ reCAPTCHA:', e);
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Google reCAPTCHA');
      };

      document.head.appendChild(script);
    } else {
      console.log('üìã –°–∫—Ä–∏–ø—Ç reCAPTCHA –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π, –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ä–µ–Ω–¥–µ—Ä...');
      // –°–∫—Ä–∏–ø—Ç –≤–∂–µ —î, –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ä–µ–Ω–¥–µ—Ä –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
      setTimeout(renderRecaptcha, 200);
    }

  }, []); // –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—ñ—Å–ª—è –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  if (error) {
    return (
      <div className="flex justify-center p-4 border border-destructive rounded-md bg-destructive/10">
        <div className="text-center">
          <p className="text-sm text-destructive font-medium mb-2">‚ùå {error}</p>
          <div className="text-xs text-foreground-secondary space-y-1">
            <p><strong>–î–æ–º–µ–Ω:</strong> {window.location.hostname}</p>
            <p><strong>Site Key:</strong> {import.meta.env.VITE_RECAPTCHA_SITE_KEY?.slice(0, 20)}...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!isLoaded) {
    return (
      <div className="flex justify-center p-4">
        <div className="text-center">
          <div className="flex items-center gap-2 justify-center mb-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
            <p className="text-sm text-foreground-secondary">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è reCAPTCHA...</p>
          </div>
          <div className="text-xs text-foreground-secondary space-y-1">
            <p><strong>–î–æ–º–µ–Ω:</strong> {window.location.hostname}</p>
            <p><strong>Site Key:</strong> {import.meta.env.VITE_RECAPTCHA_SITE_KEY?.slice(0, 20)}...</p>
          </div>
        </div>
      </div>
    );
  }

  // 1. –°–¢–í–û–†–Æ–Ñ–ú–û –ß–Ü–¢–ö–ï –ú–Ü–°–¶–ï –î–õ–Ø CAPTCHA
  return (
    <div className="flex justify-center">
      <div id="recaptcha-container" className="recaptcha-widget"></div>
    </div>
  );
};